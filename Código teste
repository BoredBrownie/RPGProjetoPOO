// Classe abstrata Personagem
abstract class Personagem {
    private String nome;
    private int vida;
    private int mana;
    private int ataque;
    private int defesa;

    public Personagem(String nome, int vida, int mana, int ataque, int defesa) {
        this.nome = nome;
        this.vida = vida;
        this.mana = mana;
        this.ataque = ataque;
        this.defesa = defesa;
    }

    // Métodos getter e setter para encapsulamento
    public String getNome() { return nome; }
    public int getVida() { return vida; }
    public void setVida(int vida) { this.vida = vida; }
    public int getMana() { return mana; }
    public void setMana(int mana) { this.mana = mana; }
    
    // Métodos abstratos para polimorfismo
    public abstract void atacar(Personagem alvo);
    public abstract void defender();

    // Método para verificar se o personagem está vivo
    public boolean isVivo() { return this.vida > 0; }
}

// Interface Ataque
interface Ataque {
    void ataqueEspecial(Personagem alvo);
}

// Classes específicas de personagens
class Guerreiro extends Personagem implements Ataque {
    public Guerreiro(String nome) {
        super(nome, 100, 30, 20, 15);
    }

    @Override
    public void atacar(Personagem alvo) {
        int dano = getAtaque() - alvo.getDefesa();
        alvo.setVida(alvo.getVida() - dano);
        System.out.println(getNome() + " atacou " + alvo.getNome() + " causando " + dano + " de dano!");
    }

    @Override
    public void defender() {
        System.out.println(getNome() + " levanta seu escudo para se proteger.");
    }

    @Override
    public void ataqueEspecial(Personagem alvo) {
        System.out.println(getNome() + " usa uma habilidade especial de ataque!");
    }
}

class Mago extends Personagem implements Ataque {
    public Mago(String nome) {
        super(nome, 70, 100, 15, 5);
    }

    @Override
    public void atacar(Personagem alvo) {
        if (getMana() >= 10) {
            setMana(getMana() - 10);
            int dano = getAtaque() + 10 - alvo.getDefesa();
            alvo.setVida(alvo.getVida() - dano);
            System.out.println(getNome() + " lança uma bola de fogo em " + alvo.getNome() + ", causando " + dano + " de dano!");
        } else {
            System.out.println("Mana insuficiente!");
        }
    }

    @Override
    public void defender() {
        System.out.println(getNome() + " usa um escudo mágico para se defender.");
    }

    @Override
    public void ataqueEspecial(Personagem alvo) {
        System.out.println(getNome() + " conjura uma explosão arcana!");
    }
}

// Classe para itens (composição)
class Inventario {
    private List<Item> itens = new ArrayList<>();

    public void adicionarItem(Item item) {
        itens.add(item);
    }

    public void removerItem(Item item) {
        itens.remove(item);
    }
}

// Classe de exceção personalizada
class VidaException extends Exception {
    public VidaException(String message) {
        super(message);
    }
}

// Exemplo de Main para execução do jogo
public class Main {
    public static void main(String[] args) {
        Guerreiro guerreiro = new Guerreiro("Arthur");
        Mago mago = new Mago("Merlin");

        // Exemplo de combate
        guerreiro.atacar(mago);
        mago.atacar(guerreiro);

        // Exemplo de tratamento de exceção
        try {
            if (!mago.isVivo()) throw new VidaException(mago.getNome() + " foi derrotado!");
        } catch (VidaException e) {
            System.out.println(e.getMessage());
        }
    }
}
